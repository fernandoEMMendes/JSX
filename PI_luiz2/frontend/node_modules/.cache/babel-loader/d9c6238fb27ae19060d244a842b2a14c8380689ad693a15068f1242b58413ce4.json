{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fernando.emmendes\\\\Documents\\\\JSX\\\\PI_luiz2\\\\frontend\\\\src\\\\Context\\\\authContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport apiLocal from \"../API/apiLocal/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport default function AuthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState('');\n  const isAuth = !!user;\n  const iToken = localStorage.getItem(\"@vistaseToken\");\n  const token = JSON.parse(iToken);\n  console.log(\"AuthContext\", token);\n  console.log(\"AuthContext\", user);\n  async function loginVerify() {\n    try {\n      const response = await apiLocal.get('/ListarUsuarioToken', {\n        headers: {\n          Authorization: 'Bearer ' + `${token}`\n        }\n      });\n      setUser(response.data.id);\n    } catch (err) {\n      if (err.response.status === 401) {\n        setUser('');\n      }\n    }\n  }\n  async function signIn(_ref2) {\n    let {\n      email,\n      password\n    } = _ref2;\n    try {\n      const response = await apiLocal.post(\"/LoginUsuario\", {\n        email,\n        password\n      });\n      return response;\n    } catch (err) {\n      return err.data.dados;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loginVerify,\n      signIn,\n      isAuth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n//na hora de chamar ela em alguma página, ela deve ser chamada assim\n\n// ->Página de Login<-\n//import {authContext} from \"rota do context\"\n//import {useNavigate} from \"react-router-dom\"\n//import {useContext} from \"react\"\n//\n//const navigation = useNavigation()\n//const [email, setEmail] = useState(\"\")\n//const [password, setPassword] = useState(\"\")\n//const {signIn} = useContext(authContext)\n//\n//async function handleLogin(e) {\n//  e.preventDefault(e)\n//  \n//  try {\n//      let data = {\n//        email,\n//        password\n//      }\n//\n//    const response = await signIn(data)\n//    const token = response.data.token\n//    localStorage.setItem(\"@vistaseToken\", JSON.stringify(token))\n//    navigation(\"/Dashboard\")\n//   } catch (err) {\n//    toast.error(\"Email ou senha incorretos!\")\n//    return\n//  }\n//}\n\n// ->Demais páginas<-\n//import {authContext} from \"rota do context\"\n//import {useNavigate} from \"react-router-dom\"\n//import {useContext} from \"react\"\n//\n//const navigation = useNavigate()\n//const {loginToken} = useContext(authContext)\n//useEffect(() => {\n//    const lsToken = localStorage.getItem(\"@vistaseToken\")\n//    const token = JSON.parse(lsToken)\n//\n//    if(!token) {\n//        navigation(\"/\")\n//        return\n//    }\n//\n//    loginToken()\n//}, [])\n_s(AuthProvider, \"1AczBM2so5BSfHf/4eCwTsrzavw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","toast","apiLocal","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","_s","children","user","setUser","isAuth","iToken","localStorage","getItem","token","JSON","parse","console","log","loginVerify","response","get","headers","Authorization","data","id","err","status","signIn","_ref2","email","password","post","dados","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/fernando.emmendes/Documents/JSX/PI_luiz2/frontend/src/Context/authContext.js"],"sourcesContent":["import { createContext, useState } from \"react\"\nimport { toast } from \"react-toastify\"\nimport apiLocal from \"../API/apiLocal/api\"\n\nexport const AuthContext = createContext()\n\nexport default function AuthProvider({ children }) {\n    const [ user, setUser ] = useState('')\n    \n    const isAuth = !!user\n\n    const iToken = localStorage.getItem(\"@vistaseToken\")\n    const token = JSON.parse(iToken)\n    console.log(\"AuthContext\", token)\n    console.log(\"AuthContext\", user)\n\n    async function loginVerify() {\n        try {\n            const response = await apiLocal.get('/ListarUsuarioToken', {\n                headers: {\n                    Authorization: 'Bearer ' + `${token}`\n                }\n            })\n            setUser(response.data.id)\n        } catch (err) {\n            if(err.response.status === 401){\n                setUser('')\n            }\n        }\n    }\n\n    async function signIn({ email, password }) {\n        try {\n            const response = await apiLocal.post(\"/LoginUsuario\", {\n                email,\n                password\n            })\n            return response\n        } catch (err) {\n            return(err.data.dados)\n        }\n    }\n\n    return (\n        <AuthContext.Provider value={{ loginVerify, signIn, isAuth }}>\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\n//na hora de chamar ela em alguma página, ela deve ser chamada assim\n\n// ->Página de Login<-\n//import {authContext} from \"rota do context\"\n//import {useNavigate} from \"react-router-dom\"\n//import {useContext} from \"react\"\n//\n//const navigation = useNavigation()\n//const [email, setEmail] = useState(\"\")\n//const [password, setPassword] = useState(\"\")\n//const {signIn} = useContext(authContext)\n//\n//async function handleLogin(e) {\n//  e.preventDefault(e)\n//  \n//  try {\n//      let data = {\n//        email,\n//        password\n//      }\n//\n//    const response = await signIn(data)\n//    const token = response.data.token\n//    localStorage.setItem(\"@vistaseToken\", JSON.stringify(token))\n//    navigation(\"/Dashboard\")\n//   } catch (err) {\n//    toast.error(\"Email ou senha incorretos!\")\n//    return\n//  }\n//}\n\n\n\n\n// ->Demais páginas<-\n//import {authContext} from \"rota do context\"\n//import {useNavigate} from \"react-router-dom\"\n//import {useContext} from \"react\"\n//\n//const navigation = useNavigate()\n//const {loginToken} = useContext(authContext)\n//useEffect(() => {\n//    const lsToken = localStorage.getItem(\"@vistaseToken\")\n//    const token = JSON.parse(lsToken)\n//\n//    if(!token) {\n//        navigation(\"/\")\n//        return\n//    }\n//\n//    loginToken()\n//}, [])"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,QAAQ,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAE1C,eAAe,SAASO,YAAYA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC7C,MAAM,CAAEG,IAAI,EAAEC,OAAO,CAAE,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMY,MAAM,GAAG,CAAC,CAACF,IAAI;EAErB,MAAMG,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;EACpD,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,MAAM,CAAC;EAChCM,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEJ,KAAK,CAAC;EACjCG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEV,IAAI,CAAC;EAEhC,eAAeW,WAAWA,CAAA,EAAG;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMpB,QAAQ,CAACqB,GAAG,CAAC,qBAAqB,EAAE;QACvDC,OAAO,EAAE;UACLC,aAAa,EAAE,SAAS,GAAI,GAAET,KAAM;QACxC;MACJ,CAAC,CAAC;MACFL,OAAO,CAACW,QAAQ,CAACI,IAAI,CAACC,EAAE,CAAC;IAC7B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV,IAAGA,GAAG,CAACN,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAC;QAC3BlB,OAAO,CAAC,EAAE,CAAC;MACf;IACJ;EACJ;EAEA,eAAemB,MAAMA,CAAAC,KAAA,EAAsB;IAAA,IAArB;MAAEC,KAAK;MAAEC;IAAS,CAAC,GAAAF,KAAA;IACrC,IAAI;MACA,MAAMT,QAAQ,GAAG,MAAMpB,QAAQ,CAACgC,IAAI,CAAC,eAAe,EAAE;QAClDF,KAAK;QACLC;MACJ,CAAC,CAAC;MACF,OAAOX,QAAQ;IACnB,CAAC,CAAC,OAAOM,GAAG,EAAE;MACV,OAAOA,GAAG,CAACF,IAAI,CAACS,KAAK;IACzB;EACJ;EAEA,oBACI/B,OAAA,CAACC,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAEhB,WAAW;MAAES,MAAM;MAAElB;IAAO,CAAE;IAAAH,QAAA,EACxDA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAjC,EAAA,CA/FwBF,YAAY;AAAAoC,EAAA,GAAZpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}